<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objets\Truma_EBL_Bios_V100.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objets\Truma_EBL_Bios_V100.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Wed Jul 31 12:22:14 2024
<BR><P>
<H3>Maximum Stack Usage =        252 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Bios_Init &rArr; MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[fb]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[5f]">ADC_DMAConvCplt</a> from stm32g4xx_hal_adc.o(.text.ADC_DMAConvCplt) referenced 2 times from stm32g4xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[61]">ADC_DMAError</a> from stm32g4xx_hal_adc.o(.text.ADC_DMAError) referenced 2 times from stm32g4xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[60]">ADC_DMAHalfConvCplt</a> from stm32g4xx_hal_adc.o(.text.ADC_DMAHalfConvCplt) referenced 2 times from stm32g4xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32g4xx_it.o(.text.BusFault_Handler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[46]">COMP1_2_3_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[47]">COMP4_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[5b]">CORDIC_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[48]">CRS_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from stm32g4xx_it.o(.text.DMA1_Channel1_IRQHandler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from stm32g4xx_it.o(.text.DMA1_Channel2_IRQHandler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[57]">DMA1_Channel8_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[40]">DMA2_Channel1_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[41]">DMA2_Channel2_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[42]">DMA2_Channel3_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[43]">DMA2_Channel4_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[44]">DMA2_Channel5_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[58]">DMA2_Channel6_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[59]">DMA2_Channel7_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel8_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[55]">DMAMUX_OVR_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32g4xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT0_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[20]">FDCAN1_IT1_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[4f]">FDCAN2_IT0_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[50]">FDCAN2_IT1_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[5c]">FMAC_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[4e]">FPU_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32g4xx_it.o(.text.HardFault_Handler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[3a]">LPTIM1_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[52]">LPUART1_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32g4xx_it.o(.text.MemManage_Handler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32g4xx_it.o(.text.NMI_Handler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[b]">PVD_PVM_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32g4xx_it.o(.text.PendSV_Handler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[56]">QUADSPI_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[51]">RNG_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[c]">RTC_TAMP_LSECSS_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[49]">SAI1_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[3b]">SPI3_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32g4xx_it.o(.text.SVC_Handler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32g4xx_it.o(.text.SysTick_Handler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[5d]">SystemInit</a> from system_stm32g4xx.o(.text.SystemInit) referenced from startup_stm32g491xx.o(.text)
 <LI><a href="#[22]">TIM1_BRK_TIM15_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM17_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM16_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[4a]">TIM20_BRK_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[4d]">TIM20_CC_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[4c]">TIM20_TRG_COM_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[4b]">TIM20_UP_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[3e]">TIM6_DAC_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[3f]">TIM7_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[3c]">UART4_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[3d]">UART5_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[62]">UART_DMAAbortOnError</a> from stm32g4xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32g4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[63]">UART_RxISR_16BIT</a> from stm32g4xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32g4xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[63]">UART_RxISR_16BIT</a> from stm32g4xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32g4xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[66]">UART_RxISR_16BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced 2 times from stm32g4xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[64]">UART_RxISR_8BIT</a> from stm32g4xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32g4xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[64]">UART_RxISR_8BIT</a> from stm32g4xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32g4xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[65]">UART_RxISR_8BIT_FIFOEN</a> from stm32g4xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced 2 times from stm32g4xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[45]">UCPD1_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32g4xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32g4xx_it.o(.text.USART3_IRQHandler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[1d]">USB_HP_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[1e]">USB_LP_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32g4xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32g491xx.o(.text) referenced from startup_stm32g491xx.o(RESET)
 <LI><a href="#[ca]">_GLOBAL__sub_I_Arvi_Main.cpp</a> from arvi-main.o(.text._GLOBAL__sub_I_Arvi_Main.cpp) referenced from arvi-main.o(.init_array)
 <LI><a href="#[cb]">_GLOBAL__sub_I_CanAttender.cpp</a> from canattender.o(.text._GLOBAL__sub_I_CanAttender.cpp) referenced from canattender.o(.init_array)
 <LI><a href="#[cc]">_GLOBAL__sub_I_ErrorManager.cpp</a> from errormanager.o(.text._GLOBAL__sub_I_ErrorManager.cpp) referenced from errormanager.o(.init_array)
 <LI><a href="#[6e]">GrayWater1::updateState()</a> from graywater_1.o(.text._ZN10GrayWater111updateStateEv) referenced from graywater_1.o(.rodata._ZTV10GrayWater1)
 <LI><a href="#[6d]">GrayWater1::getTopicState()</a> from graywater_1.o(.text._ZN10GrayWater113getTopicStateEv) referenced from graywater_1.o(.rodata._ZTV10GrayWater1)
 <LI><a href="#[6c]">GrayWater1::topicReceived(unsigned char*)</a> from graywater_1.o(.text._ZN10GrayWater113topicReceivedEPh) referenced from graywater_1.o(.rodata._ZTV10GrayWater1)
 <LI><a href="#[6a]">GrayWater1::setOn()</a> from graywater_1.o(.text._ZN10GrayWater15setOnEv) referenced from graywater_1.o(.rodata._ZTV10GrayWater1)
 <LI><a href="#[6b]">GrayWater1::setOff()</a> from graywater_1.o(.text._ZN10GrayWater16setOffEv) referenced from graywater_1.o(.rodata._ZTV10GrayWater1)
 <LI><a href="#[70]">LinClients::processInfoFrame(unsigned char*)</a> from linclients.o(.text._ZN10LinClients16processInfoFrameEPh) referenced from linclients.o(.rodata._ZTV10LinClients)
 <LI><a href="#[70]">LinClients::processInfoFrame(unsigned char*)</a> from linclients.o(.text._ZN10LinClients16processInfoFrameEPh) referenced from inverter.o(.rodata._ZTV8Inverter)
 <LI><a href="#[75]">Multimedia::updateState()</a> from multimedia.o(.text._ZN10Multimedia11updateStateEv) referenced from multimedia.o(.rodata._ZTV10Multimedia)
 <LI><a href="#[74]">Multimedia::getTopicState()</a> from multimedia.o(.text._ZN10Multimedia13getTopicStateEv) referenced from multimedia.o(.rodata._ZTV10Multimedia)
 <LI><a href="#[73]">Multimedia::topicReceived(unsigned char*)</a> from multimedia.o(.text._ZN10Multimedia13topicReceivedEPh) referenced from multimedia.o(.rodata._ZTV10Multimedia)
 <LI><a href="#[71]">Multimedia::setOn()</a> from multimedia.o(.text._ZN10Multimedia5setOnEv) referenced from multimedia.o(.rodata._ZTV10Multimedia)
 <LI><a href="#[72]">Multimedia::setOff()</a> from multimedia.o(.text._ZN10Multimedia6setOffEv) referenced from multimedia.o(.rodata._ZTV10Multimedia)
 <LI><a href="#[7b]">FreshWater1::updateState()</a> from freshwater_1.o(.text._ZN11FreshWater111updateStateEv) referenced from freshwater_1.o(.rodata._ZTV11FreshWater1)
 <LI><a href="#[7a]">FreshWater1::getTopicState()</a> from freshwater_1.o(.text._ZN11FreshWater113getTopicStateEv) referenced from freshwater_1.o(.rodata._ZTV11FreshWater1)
 <LI><a href="#[79]">FreshWater1::topicReceived(unsigned char*)</a> from freshwater_1.o(.text._ZN11FreshWater113topicReceivedEPh) referenced from freshwater_1.o(.rodata._ZTV11FreshWater1)
 <LI><a href="#[77]">FreshWater1::setOn()</a> from freshwater_1.o(.text._ZN11FreshWater15setOnEv) referenced from freshwater_1.o(.rodata._ZTV11FreshWater1)
 <LI><a href="#[78]">FreshWater1::setOff()</a> from freshwater_1.o(.text._ZN11FreshWater16setOffEv) referenced from freshwater_1.o(.rodata._ZTV11FreshWater1)
 <LI><a href="#[81]">FloorHeating::updateState()</a> from floorheating.o(.text._ZN12FloorHeating11updateStateEv) referenced from floorheating.o(.rodata._ZTV12FloorHeating)
 <LI><a href="#[80]">FloorHeating::getTopicState()</a> from floorheating.o(.text._ZN12FloorHeating13getTopicStateEv) referenced from floorheating.o(.rodata._ZTV12FloorHeating)
 <LI><a href="#[7f]">FloorHeating::topicReceived(unsigned char*)</a> from floorheating.o(.text._ZN12FloorHeating13topicReceivedEPh) referenced from floorheating.o(.rodata._ZTV12FloorHeating)
 <LI><a href="#[7d]">FloorHeating::setOn()</a> from floorheating.o(.text._ZN12FloorHeating5setOnEv) referenced from floorheating.o(.rodata._ZTV12FloorHeating)
 <LI><a href="#[7e]">FloorHeating::setOff()</a> from floorheating.o(.text._ZN12FloorHeating6setOffEv) referenced from floorheating.o(.rodata._ZTV12FloorHeating)
 <LI><a href="#[87]">EmptyingValve::updateState()</a> from emptyingvalve.o(.text._ZN13EmptyingValve11updateStateEv) referenced from emptyingvalve.o(.rodata._ZTV13EmptyingValve)
 <LI><a href="#[86]">EmptyingValve::getTopicState()</a> from emptyingvalve.o(.text._ZN13EmptyingValve13getTopicStateEv) referenced from emptyingvalve.o(.rodata._ZTV13EmptyingValve)
 <LI><a href="#[85]">EmptyingValve::topicReceived(unsigned char*)</a> from emptyingvalve.o(.text._ZN13EmptyingValve13topicReceivedEPh) referenced from emptyingvalve.o(.rodata._ZTV13EmptyingValve)
 <LI><a href="#[83]">EmptyingValve::setOn()</a> from emptyingvalve.o(.text._ZN13EmptyingValve5setOnEv) referenced from emptyingvalve.o(.rodata._ZTV13EmptyingValve)
 <LI><a href="#[84]">EmptyingValve::setOff()</a> from emptyingvalve.o(.text._ZN13EmptyingValve6setOffEv) referenced from emptyingvalve.o(.rodata._ZTV13EmptyingValve)
 <LI><a href="#[8e]">EngineBattery1::updateState()</a> from enginebattery1.o(.text._ZN14EngineBattery111updateStateEv) referenced from enginebattery1.o(.rodata._ZTV14EngineBattery1)
 <LI><a href="#[8d]">EngineBattery1::getTopicState()</a> from enginebattery1.o(.text._ZN14EngineBattery113getTopicStateEv) referenced from enginebattery1.o(.rodata._ZTV14EngineBattery1)
 <LI><a href="#[8c]">EngineBattery1::topicReceived(unsigned char*)</a> from enginebattery1.o(.text._ZN14EngineBattery113topicReceivedEPh) referenced from enginebattery1.o(.rodata._ZTV14EngineBattery1)
 <LI><a href="#[8a]">EngineBattery1::setOn()</a> from enginebattery1.o(.text._ZN14EngineBattery15setOnEv) referenced from enginebattery1.o(.rodata._ZTV14EngineBattery1)
 <LI><a href="#[8b]">EngineBattery1::setOff()</a> from enginebattery1.o(.text._ZN14EngineBattery16setOffEv) referenced from enginebattery1.o(.rodata._ZTV14EngineBattery1)
 <LI><a href="#[94]">ExternalLigths::updateState()</a> from externalligths.o(.text._ZN14ExternalLigths11updateStateEv) referenced from externalligths.o(.rodata._ZTV14ExternalLigths)
 <LI><a href="#[93]">ExternalLigths::getTopicState()</a> from externalligths.o(.text._ZN14ExternalLigths13getTopicStateEv) referenced from externalligths.o(.rodata._ZTV14ExternalLigths)
 <LI><a href="#[92]">ExternalLigths::topicReceived(unsigned char*)</a> from externalligths.o(.text._ZN14ExternalLigths13topicReceivedEPh) referenced from externalligths.o(.rodata._ZTV14ExternalLigths)
 <LI><a href="#[90]">ExternalLigths::setOn()</a> from externalligths.o(.text._ZN14ExternalLigths5setOnEv) referenced from externalligths.o(.rodata._ZTV14ExternalLigths)
 <LI><a href="#[91]">ExternalLigths::setOff()</a> from externalligths.o(.text._ZN14ExternalLigths6setOffEv) referenced from externalligths.o(.rodata._ZTV14ExternalLigths)
 <LI><a href="#[9a]">InternalLigths::updateState()</a> from internalligths.o(.text._ZN14InternalLigths11updateStateEv) referenced from internalligths.o(.rodata._ZTV14InternalLigths)
 <LI><a href="#[99]">InternalLigths::getTopicState()</a> from internalligths.o(.text._ZN14InternalLigths13getTopicStateEv) referenced from internalligths.o(.rodata._ZTV14InternalLigths)
 <LI><a href="#[98]">InternalLigths::topicReceived(unsigned char*)</a> from internalligths.o(.text._ZN14InternalLigths13topicReceivedEPh) referenced from internalligths.o(.rodata._ZTV14InternalLigths)
 <LI><a href="#[96]">InternalLigths::setOn()</a> from internalligths.o(.text._ZN14InternalLigths5setOnEv) referenced from internalligths.o(.rodata._ZTV14InternalLigths)
 <LI><a href="#[97]">InternalLigths::setOff()</a> from internalligths.o(.text._ZN14InternalLigths6setOffEv) referenced from internalligths.o(.rodata._ZTV14InternalLigths)
 <LI><a href="#[a0]">LeisureBattery1::updateState()</a> from leisurebattery1.o(.text._ZN15LeisureBattery111updateStateEv) referenced from leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
 <LI><a href="#[9f]">LeisureBattery1::getTopicState()</a> from leisurebattery1.o(.text._ZN15LeisureBattery113getTopicStateEv) referenced from leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
 <LI><a href="#[9e]">LeisureBattery1::topicReceived(unsigned char*)</a> from leisurebattery1.o(.text._ZN15LeisureBattery113topicReceivedEPh) referenced from leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
 <LI><a href="#[a1]">LeisureBattery1::processInfoFrame(unsigned char*)</a> from leisurebattery1.o(.text._ZN15LeisureBattery116processInfoFrameEPh) referenced from leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
 <LI><a href="#[9c]">LeisureBattery1::setOn()</a> from leisurebattery1.o(.text._ZN15LeisureBattery15setOnEv) referenced from leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
 <LI><a href="#[9d]">LeisureBattery1::setOff()</a> from leisurebattery1.o(.text._ZN15LeisureBattery16setOffEv) referenced from leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
 <LI><a href="#[a8]">SolarRegulator1::updateState()</a> from solarregulator1.o(.text._ZN15SolarRegulator111updateStateEv) referenced from solarregulator1.o(.rodata._ZTV15SolarRegulator1)
 <LI><a href="#[a7]">SolarRegulator1::getTopicState()</a> from solarregulator1.o(.text._ZN15SolarRegulator113getTopicStateEv) referenced from solarregulator1.o(.rodata._ZTV15SolarRegulator1)
 <LI><a href="#[a6]">SolarRegulator1::topicReceived(unsigned char*)</a> from solarregulator1.o(.text._ZN15SolarRegulator113topicReceivedEPh) referenced from solarregulator1.o(.rodata._ZTV15SolarRegulator1)
 <LI><a href="#[a9]">SolarRegulator1::processInfoFrame(unsigned char*)</a> from solarregulator1.o(.text._ZN15SolarRegulator116processInfoFrameEPh) referenced from solarregulator1.o(.rodata._ZTV15SolarRegulator1)
 <LI><a href="#[a4]">SolarRegulator1::setOn()</a> from solarregulator1.o(.text._ZN15SolarRegulator15setOnEv) referenced from solarregulator1.o(.rodata._ZTV15SolarRegulator1)
 <LI><a href="#[a5]">SolarRegulator1::setOff()</a> from solarregulator1.o(.text._ZN15SolarRegulator16setOffEv) referenced from solarregulator1.o(.rodata._ZTV15SolarRegulator1)
 <LI><a href="#[b0]">Fuses::updateState()</a> from fuses.o(.text._ZN5Fuses11updateStateEv) referenced from fuses.o(.rodata._ZTV5Fuses)
 <LI><a href="#[af]">Fuses::getTopicState()</a> from fuses.o(.text._ZN5Fuses13getTopicStateEv) referenced from fuses.o(.rodata._ZTV5Fuses)
 <LI><a href="#[ae]">Fuses::topicReceived(unsigned char*)</a> from fuses.o(.text._ZN5Fuses13topicReceivedEPh) referenced from fuses.o(.rodata._ZTV5Fuses)
 <LI><a href="#[ac]">Fuses::setOn()</a> from fuses.o(.text._ZN5Fuses5setOnEv) referenced from fuses.o(.rodata._ZTV5Fuses)
 <LI><a href="#[ad]">Fuses::setOff()</a> from fuses.o(.text._ZN5Fuses6setOffEv) referenced from fuses.o(.rodata._ZTV5Fuses)
 <LI><a href="#[b6]">Fridge::updateState()</a> from fridge.o(.text._ZN6Fridge11updateStateEv) referenced from fridge.o(.rodata._ZTV6Fridge)
 <LI><a href="#[b5]">Fridge::getTopicState()</a> from fridge.o(.text._ZN6Fridge13getTopicStateEv) referenced from fridge.o(.rodata._ZTV6Fridge)
 <LI><a href="#[b4]">Fridge::topicReceived(unsigned char*)</a> from fridge.o(.text._ZN6Fridge13topicReceivedEPh) referenced from fridge.o(.rodata._ZTV6Fridge)
 <LI><a href="#[b2]">Fridge::setOn()</a> from fridge.o(.text._ZN6Fridge5setOnEv) referenced from fridge.o(.rodata._ZTV6Fridge)
 <LI><a href="#[b3]">Fridge::setOff()</a> from fridge.o(.text._ZN6Fridge6setOffEv) referenced from fridge.o(.rodata._ZTV6Fridge)
 <LI><a href="#[bc]">Ligths1::updateState()</a> from ligths_1.o(.text._ZN7Ligths111updateStateEv) referenced from ligths_1.o(.rodata._ZTV7Ligths1)
 <LI><a href="#[bb]">Ligths1::getTopicState()</a> from ligths_1.o(.text._ZN7Ligths113getTopicStateEv) referenced from ligths_1.o(.rodata._ZTV7Ligths1)
 <LI><a href="#[ba]">Ligths1::topicReceived(unsigned char*)</a> from ligths_1.o(.text._ZN7Ligths113topicReceivedEPh) referenced from ligths_1.o(.rodata._ZTV7Ligths1)
 <LI><a href="#[b8]">Ligths1::setOn()</a> from ligths_1.o(.text._ZN7Ligths15setOnEv) referenced from ligths_1.o(.rodata._ZTV7Ligths1)
 <LI><a href="#[b9]">Ligths1::setOff()</a> from ligths_1.o(.text._ZN7Ligths16setOffEv) referenced from ligths_1.o(.rodata._ZTV7Ligths1)
 <LI><a href="#[c2]">Inverter::updateState()</a> from inverter.o(.text._ZN8Inverter11updateStateEv) referenced from inverter.o(.rodata._ZTV8Inverter)
 <LI><a href="#[c1]">Inverter::getTopicState()</a> from inverter.o(.text._ZN8Inverter13getTopicStateEv) referenced from inverter.o(.rodata._ZTV8Inverter)
 <LI><a href="#[c0]">Inverter::topicReceived(unsigned char*)</a> from inverter.o(.text._ZN8Inverter13topicReceivedEPh) referenced from inverter.o(.rodata._ZTV8Inverter)
 <LI><a href="#[be]">Inverter::setOn()</a> from inverter.o(.text._ZN8Inverter5setOnEv) referenced from inverter.o(.rodata._ZTV8Inverter)
 <LI><a href="#[bf]">Inverter::setOff()</a> from inverter.o(.text._ZN8Inverter6setOffEv) referenced from inverter.o(.rodata._ZTV8Inverter)
 <LI><a href="#[c8]">WaterPump::updateState()</a> from waterpump.o(.text._ZN9WaterPump11updateStateEv) referenced from waterpump.o(.rodata._ZTV9WaterPump)
 <LI><a href="#[c7]">WaterPump::getTopicState()</a> from waterpump.o(.text._ZN9WaterPump13getTopicStateEv) referenced from waterpump.o(.rodata._ZTV9WaterPump)
 <LI><a href="#[c6]">WaterPump::topicReceived(unsigned char*)</a> from waterpump.o(.text._ZN9WaterPump13topicReceivedEPh) referenced from waterpump.o(.rodata._ZTV9WaterPump)
 <LI><a href="#[c4]">WaterPump::setOn()</a> from waterpump.o(.text._ZN9WaterPump5setOnEv) referenced from waterpump.o(.rodata._ZTV9WaterPump)
 <LI><a href="#[c5]">WaterPump::setOff()</a> from waterpump.o(.text._ZN9WaterPump6setOffEv) referenced from waterpump.o(.rodata._ZTV9WaterPump)
 <LI><a href="#[69]">std::__2::vector&lang;errors, std::__2::allocator&lang;errors&rang;&rang;::~vector__sub_object[abi:v16000]()</a> from errormanager.o(.text._ZNSt3__26vectorI6errorsNS_9allocatorIS1_EEED2B6v16000Ev) referenced 2 times from errormanager.o(.text._GLOBAL__sub_I_ErrorManager.cpp)
 <LI><a href="#[67]">std::__2::vector&lang;SystemDevices*, std::__2::allocator&lang;SystemDevices*&rang;&rang;::~vector__sub_object[abi:v16000]()</a> from arvi-main.o(.text._ZNSt3__26vectorIP13SystemDevicesNS_9allocatorIS2_EEED2B6v16000Ev) referenced 2 times from arvi-main.o(.text._GLOBAL__sub_I_Arvi_Main.cpp)
 <LI><a href="#[68]">std::__2::vector&lang;unsigned char*, std::__2::allocator&lang;unsigned char*&rang;&rang;::~vector__sub_object[abi:v16000]()</a> from canattender.o(.text._ZNSt3__26vectorIPhNS_9allocatorIS1_EEED2B6v16000Ev) referenced 2 times from canattender.o(.text._GLOBAL__sub_I_CanAttender.cpp)
 <LI><a href="#[a3]">non-virtual thunk to LeisureBattery1::processInfoFrame(unsigned char*)</a> from leisurebattery1.o(.text._ZThn12_N15LeisureBattery116processInfoFrameEPh) referenced from leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
 <LI><a href="#[ab]">non-virtual thunk to SolarRegulator1::processInfoFrame(unsigned char*)</a> from solarregulator1.o(.text._ZThn12_N15SolarRegulator116processInfoFrameEPh) referenced from solarregulator1.o(.rodata._ZTV15SolarRegulator1)
 <LI><a href="#[6f]">non-virtual thunk to GrayWater1::updateState()</a> from graywater_1.o(.text._ZThn8_N10GrayWater111updateStateEv) referenced from graywater_1.o(.rodata._ZTV10GrayWater1)
 <LI><a href="#[76]">non-virtual thunk to Multimedia::updateState()</a> from multimedia.o(.text._ZThn8_N10Multimedia11updateStateEv) referenced from multimedia.o(.rodata._ZTV10Multimedia)
 <LI><a href="#[7c]">non-virtual thunk to FreshWater1::updateState()</a> from freshwater_1.o(.text._ZThn8_N11FreshWater111updateStateEv) referenced from freshwater_1.o(.rodata._ZTV11FreshWater1)
 <LI><a href="#[82]">non-virtual thunk to FloorHeating::updateState()</a> from floorheating.o(.text._ZThn8_N12FloorHeating11updateStateEv) referenced from floorheating.o(.rodata._ZTV12FloorHeating)
 <LI><a href="#[88]">non-virtual thunk to EmptyingValve::updateState()</a> from emptyingvalve.o(.text._ZThn8_N13EmptyingValve11updateStateEv) referenced from emptyingvalve.o(.rodata._ZTV13EmptyingValve)
 <LI><a href="#[8f]">non-virtual thunk to EngineBattery1::updateState()</a> from enginebattery1.o(.text._ZThn8_N14EngineBattery111updateStateEv) referenced from enginebattery1.o(.rodata._ZTV14EngineBattery1)
 <LI><a href="#[95]">non-virtual thunk to ExternalLigths::updateState()</a> from externalligths.o(.text._ZThn8_N14ExternalLigths11updateStateEv) referenced from externalligths.o(.rodata._ZTV14ExternalLigths)
 <LI><a href="#[9b]">non-virtual thunk to InternalLigths::updateState()</a> from internalligths.o(.text._ZThn8_N14InternalLigths11updateStateEv) referenced from internalligths.o(.rodata._ZTV14InternalLigths)
 <LI><a href="#[a2]">non-virtual thunk to LeisureBattery1::updateState()</a> from leisurebattery1.o(.text._ZThn8_N15LeisureBattery111updateStateEv) referenced from leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
 <LI><a href="#[aa]">non-virtual thunk to SolarRegulator1::updateState()</a> from solarregulator1.o(.text._ZThn8_N15SolarRegulator111updateStateEv) referenced from solarregulator1.o(.rodata._ZTV15SolarRegulator1)
 <LI><a href="#[b1]">non-virtual thunk to Fuses::updateState()</a> from fuses.o(.text._ZThn8_N5Fuses11updateStateEv) referenced from fuses.o(.rodata._ZTV5Fuses)
 <LI><a href="#[b7]">non-virtual thunk to Fridge::updateState()</a> from fridge.o(.text._ZThn8_N6Fridge11updateStateEv) referenced from fridge.o(.rodata._ZTV6Fridge)
 <LI><a href="#[bd]">non-virtual thunk to Ligths1::updateState()</a> from ligths_1.o(.text._ZThn8_N7Ligths111updateStateEv) referenced from ligths_1.o(.rodata._ZTV7Ligths1)
 <LI><a href="#[c3]">non-virtual thunk to Inverter::updateState()</a> from inverter.o(.text._ZThn8_N8Inverter11updateStateEv) referenced from inverter.o(.rodata._ZTV8Inverter)
 <LI><a href="#[c9]">non-virtual thunk to WaterPump::updateState()</a> from waterpump.o(.text._ZThn8_N9WaterPump11updateStateEv) referenced from waterpump.o(.rodata._ZTV9WaterPump)
 <LI><a href="#[89]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from airconditioner1.o(.rodata._ZTV13SystemDevices)
 <LI><a href="#[89]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 4 times from devices.o(.rodata._ZTV7Devices)
 <LI><a href="#[5e]">__main</a> from __main.o(!!!main) referenced from startup_stm32g491xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[d0]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a3]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a4]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[d1]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1a5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[dc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[d4]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[d6]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[e1]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[d7]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1bc]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1bd]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1be]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1bf]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1c0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1c1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[cf]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[db]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[dd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Bios_Init &rArr; MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[fc]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[e0]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[e2]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>COMP1_2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>COMP4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_TAMP_LSECSS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM20_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM20_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM20_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM20_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g491xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g491xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c6]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::addClient(LinClients*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::addClients(Devices*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::setIdInfo(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::getError()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::addError(short, short)
</UL>

<P><STRONG><a name="[e6]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Arvi_Main.cpp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_CanAttender.cpp
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ErrorManager.cpp
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::setIdInfo(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::getError()
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::cleanError(short, short)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::addError(short, short)
</UL>

<P><STRONG><a name="[e8]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1c7]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::addClient(LinClients*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::addClients(Devices*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[ea]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[1c9]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC1_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[e3]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ed]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[f0]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[e5]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[e9]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[f4]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1d0]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1d1]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1d6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[1d7]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[f6]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d5]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[f8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1db]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[f3]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[f2]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1dc]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1dd]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f5]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1de]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f9]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[f7]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[fd]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[fe]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5f]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(.text.ADC_DMAConvCplt))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[61]"></a>ADC_DMAError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(.text.ADC_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[60]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(.text.ADC_DMAHalfConvCplt))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_adc.o(.text.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[102]"></a>ADC_Enable</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[104]"></a>ArviGet</STRONG> (Thumb, 1024 bytes, Stack size 8 bytes, digital.o(.text.ArviGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ArviGet &rArr; Read_IO_Expander &rArr; HAL_I2C_Mem_Read &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IO_Expander
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuses::updateState()
</UL>

<P><STRONG><a name="[113]"></a>ArviGet_AD</STRONG> (Thumb, 462 bytes, Stack size 0 bytes, analog.o(.text.ArviGet_AD))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVariant
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Setup
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::updateState()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalRead(IOParameters const&)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::updateState()
</UL>

<P><STRONG><a name="[107]"></a>ArviGet_mA</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, analog.o(.text.ArviGet_mA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArviGet_mA &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to SolarRegulator1::updateState()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::updateState()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::updateState()
</UL>

<P><STRONG><a name="[10b]"></a>ArviGet_mV</STRONG> (Thumb, 288 bytes, Stack size 8 bytes, analog.o(.text.ArviGet_mV))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArviGet_mV &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to EngineBattery1::updateState()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineBattery1::updateState()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::processInfoFrame(unsigned char*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::updateState()
</UL>

<P><STRONG><a name="[10c]"></a>ArviSet</STRONG> (Thumb, 538 bytes, Stack size 16 bytes, digital.o(.text.ArviSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IO_Expander
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IO_Expander
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::LinMaster()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::Lin()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>

<P><STRONG><a name="[10f]"></a>Arvi_Main</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, arvi-main.o(.text.Arvi_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Arvi_Main &rArr; Lin::updateInfoFrames() &rArr; CommunicationManager::getTopicState(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::updateInfoFrames()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_AD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMultiplexores
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>Arvi_Setup</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, arvi-main.o(.text.Arvi_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Arvi_Setup &rArr; initTopics() &rArr; GrayWater1::GrayWater1(short) &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::LinMaster()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::Lin()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_AD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMultiplexores
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[119]"></a>Bios_Init</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, main.o(.text.Bios_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = Bios_Init &rArr; MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC1_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Extender_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel1_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, init.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IO_Expander
</UL>

<P><STRONG><a name="[110]"></a>GetMilliSec</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.GetMilliSec))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to EngineBattery1::updateState()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineBattery1::updateState()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyingValve::topicReceived(unsigned char*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to SolarRegulator1::updateState()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::updateState()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::updateState()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::topicReceived(unsigned char*)
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::updateState()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuses::updateState()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::topicReceived(unsigned char*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::updateState()
</UL>

<P><STRONG><a name="[15c]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 852 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(.text.HAL_ADC_ConvCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[101]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(.text.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[ff]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_adc.o(.text.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[12a]"></a>HAL_ADC_Init</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[12b]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 472 bytes, Stack size 128 bytes, stm32g4xx_hal_msp.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[128]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, stm32g4xx_hal_adc.o(.text.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[132]"></a>HAL_DAC_ConfigChannel</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, stm32g4xx_hal_dac.o(.text.HAL_DAC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DAC_ConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC1_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_DAC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32g4xx_hal_dac.o(.text.HAL_DAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DAC1_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_DAC_MspInit</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, stm32g4xx_hal_msp.o(.text.HAL_DAC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
</UL>

<P><STRONG><a name="[151]"></a>HAL_DMA_Abort</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14e]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[129]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[130]"></a>HAL_DMA_Init</STRONG> (Thumb, 292 bytes, Stack size 36 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[131]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, stm32g4xx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
</UL>

<P><STRONG><a name="[136]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, stm32g4xx_hal_fdcan.o(.text.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
</UL>

<P><STRONG><a name="[137]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 148 bytes, Stack size 112 bytes, stm32g4xx_hal_msp.o(.text.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 414 bytes, Stack size 44 bytes, stm32g4xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[106]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet
</UL>

<P><STRONG><a name="[10e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviSet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMultiplexores
</UL>

<P><STRONG><a name="[103]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>

<P><STRONG><a name="[15d]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32g4xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32g4xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_I2C_Init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, stm32g4xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C3_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C2_Init
</UL>

<P><STRONG><a name="[13a]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 804 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IO_Expander
</UL>

<P><STRONG><a name="[13d]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 804 bytes, Stack size 40 bytes, stm32g4xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Extender_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IO_Expander
</UL>

<P><STRONG><a name="[139]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 308 bytes, Stack size 128 bytes, stm32g4xx_hal_msp.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[162]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32g4xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[11a]"></a>HAL_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32g4xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_InitTick</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32g4xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[143]"></a>HAL_LIN_Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text.HAL_LIN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = HAL_LIN_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[19a]"></a>HAL_LIN_SendBreak</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(.text.HAL_LIN_SendBreak))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::sendInfoFrame(unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::sendControlFrame(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[140]"></a>HAL_MspInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32g4xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableUCPDDeadBattery
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[155]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[142]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[13e]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[163]"></a>HAL_PWREx_ControlVoltageScaling</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_ControlVoltageScaling))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[148]"></a>HAL_PWREx_DisableUCPDDeadBattery</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32g4xx_hal_pwr_ex.o(.text.HAL_PWREx_DisableUCPDDeadBattery))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[12d]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 752 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[149]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 802 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[133]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
</UL>

<P><STRONG><a name="[167]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[16a]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[168]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[14a]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1146 bytes, Stack size 32 bytes, stm32g4xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[141]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32g4xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[161]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[153]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[160]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[15f]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[152]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
</UL>

<P><STRONG><a name="[14b]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 940 bytes, Stack size 16 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[154]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[144]"></a>HAL_UART_MspInit</STRONG> (Thumb, 392 bytes, Stack size 120 bytes, stm32g4xx_hal_msp.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
</UL>

<P><STRONG><a name="[156]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::LinMaster()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::Lin()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[158]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, linmaster.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; Lin::composeMsgLin(unsigned char) &rArr; Lin::verifyInfoFrame(unsigned char) &rArr; Errors::getError() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::composeMsgLin(unsigned char)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::composeMsgLin(unsigned char)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[15b]"></a>HAL_UART_Transmit</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UART3
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UART1
</UL>

<P><STRONG><a name="[14f]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[127]"></a>IO_Extender_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, init.o(.text.IO_Extender_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = IO_Extender_Init &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_IO_Expander
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[122]"></a>MX_ADC1_Init</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, init.o(.text.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[123]"></a>MX_ADC2_Init</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, init.o(.text.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[126]"></a>MX_DAC1_Init</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, init.o(.text.MX_DAC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = MX_DAC1_Init &rArr; HAL_DAC_Init &rArr; HAL_DAC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_ConfigChannel
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DAC_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[11d]"></a>MX_DMA_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, init.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[11e]"></a>MX_FDCAN1_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, init.o(.text.MX_FDCAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = MX_FDCAN1_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[11c]"></a>MX_GPIO_Init</STRONG> (Thumb, 288 bytes, Stack size 64 bytes, init.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[124]"></a>MX_I2C2_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, init.o(.text.MX_I2C2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = MX_I2C2_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[125]"></a>MX_I2C3_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, init.o(.text.MX_I2C3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = MX_I2C3_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[11f]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, init.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_LIN_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[120]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, init.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[121]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, init.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_LIN_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::sendControlFrame(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[105]"></a>Read_IO_Expander</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, comm.o(.text.Read_IO_Expander))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_IO_Expander &rArr; HAL_I2C_Mem_Read &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviSet
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>ScanMultiplexores</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, analog.o(.text.ScanMultiplexores))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ScanMultiplexores
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVariant
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Setup
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32g4xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>SystemClock_Config</STRONG> (Thumb, 118 bytes, Stack size 96 bytes, init.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ControlVoltageScaling
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
</UL>

<P><STRONG><a name="[5d]"></a>SystemInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system_stm32g4xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(.text)
</UL>
<P><STRONG><a name="[164]"></a>Tx_UART1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, comm.o(.text.Tx_UART1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Tx_UART1 &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::verifyInfoFrame(unsigned char)
</UL>

<P><STRONG><a name="[165]"></a>Tx_UART3</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, comm.o(.text.Tx_UART3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Tx_UART3 &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::sendInfoFrame(unsigned char)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::sendControlFrame(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[145]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, stm32g4xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
</UL>

<P><STRONG><a name="[147]"></a>UART_CheckIdleState</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
</UL>

<P><STRONG><a name="[146]"></a>UART_SetConfig</STRONG> (Thumb, 728 bytes, Stack size 24 bytes, stm32g4xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_Init
</UL>

<P><STRONG><a name="[157]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[166]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, stm32g4xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32g4xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g491xx.o(RESET)
</UL>
<P><STRONG><a name="[10d]"></a>Write_IO_Expander</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, comm.o(.text.Write_IO_Expander))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Extender_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviSet
</UL>

<P><STRONG><a name="[118]"></a>initTopics()</STRONG> (Thumb, 2826 bytes, Stack size 40 bytes, arvi-main.o(.text._Z10initTopicsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = initTopics() &rArr; GrayWater1::GrayWater1(short) &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterPump::WaterPump(short)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::SolarRegulator1(short)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyingValve::EmptyingValve(short)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fridge::Fridge(short)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorHeating::FloorHeating(short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::LeisureBattery1(short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multimedia::Multimedia(short)
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::addClient(LinClients*)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverter::Inverter(short)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ligths1::Ligths1(short)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalLigths::ExternalLigths(short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalLigths::InternalLigths(short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::GrayWater1(short)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuses::Fuses(short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::FreshWater1(short)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::addClients(Devices*)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineBattery1::EngineBattery1(short)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Setup
</UL>

<P><STRONG><a name="[6e]"></a>GrayWater1::updateState()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, graywater_1.o(.text._ZN10GrayWater111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GrayWater1::updateState() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_AD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to GrayWater1::updateState()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graywater_1.o(.rodata._ZTV10GrayWater1)
</UL>
<P><STRONG><a name="[6d]"></a>GrayWater1::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, graywater_1.o(.text._ZN10GrayWater113getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> graywater_1.o(.rodata._ZTV10GrayWater1)
</UL>
<P><STRONG><a name="[6c]"></a>GrayWater1::topicReceived(unsigned char*)</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, graywater_1.o(.text._ZN10GrayWater113topicReceivedEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GrayWater1::topicReceived(unsigned char*) &rArr; Utils::ioDigitalRead(IOParameters const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalRead(IOParameters const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graywater_1.o(.rodata._ZTV10GrayWater1)
</UL>
<P><STRONG><a name="[6a]"></a>GrayWater1::setOn()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, graywater_1.o(.text._ZN10GrayWater15setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GrayWater1::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graywater_1.o(.rodata._ZTV10GrayWater1)
</UL>
<P><STRONG><a name="[6b]"></a>GrayWater1::setOff()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, graywater_1.o(.text._ZN10GrayWater16setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GrayWater1::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graywater_1.o(.rodata._ZTV10GrayWater1)
</UL>
<P><STRONG><a name="[171]"></a>GrayWater1::GrayWater1(short)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, graywater_1.o(.text._ZN10GrayWater1C2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GrayWater1::GrayWater1(short) &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1df]"></a>GrayWater1::GrayWater1__sub_object(short)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, graywater_1.o(.text._ZN10GrayWater1C2Es), UNUSED)

<P><STRONG><a name="[198]"></a>LinClients::verifyIdInfo(unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, linclients.o(.text._ZN10LinClients12verifyIdInfoEh))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::composeMsgLin(unsigned char)
</UL>

<P><STRONG><a name="[199]"></a>LinClients::getSizeInfoFrame()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, linclients.o(.text._ZN10LinClients16getSizeInfoFrameEv))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::composeMsgLin(unsigned char)
</UL>

<P><STRONG><a name="[70]"></a>LinClients::processInfoFrame(unsigned char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linclients.o(.text._ZN10LinClients16processInfoFrameEPh))
<BR>[Address Reference Count : 2]<UL><LI> linclients.o(.rodata._ZTV10LinClients)
<LI> inverter.o(.rodata._ZTV8Inverter)
</UL>
<P><STRONG><a name="[18c]"></a>LinClients::setSizeInfoFrame(short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linclients.o(.text._ZN10LinClients16setSizeInfoFrameEs))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::SolarRegulator1(short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::LeisureBattery1(short)
</UL>

<P><STRONG><a name="[182]"></a>LinClients::setIdInfo(unsigned char)</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, linclients.o(.text._ZN10LinClients9setIdInfoEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = LinClients::setIdInfo(unsigned char) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::SolarRegulator1(short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::LeisureBattery1(short)
</UL>

<P><STRONG><a name="[184]"></a>LinClients::LinClients()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, linclients.o(.text._ZN10LinClientsC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[18a]"></a>LinClients::LinClients__sub_object()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, linclients.o(.text._ZN10LinClientsC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinClients::LinClients__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::SolarRegulator1(short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::LeisureBattery1(short)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverter::Inverter(short)
</UL>

<P><STRONG><a name="[75]"></a>Multimedia::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, multimedia.o(.text._ZN10Multimedia11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> multimedia.o(.rodata._ZTV10Multimedia)
</UL>
<P><STRONG><a name="[74]"></a>Multimedia::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, multimedia.o(.text._ZN10Multimedia13getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> multimedia.o(.rodata._ZTV10Multimedia)
</UL>
<P><STRONG><a name="[73]"></a>Multimedia::topicReceived(unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, multimedia.o(.text._ZN10Multimedia13topicReceivedEPh))
<BR>[Address Reference Count : 1]<UL><LI> multimedia.o(.rodata._ZTV10Multimedia)
</UL>
<P><STRONG><a name="[71]"></a>Multimedia::setOn()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, multimedia.o(.text._ZN10Multimedia5setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Multimedia::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multimedia.o(.rodata._ZTV10Multimedia)
</UL>
<P><STRONG><a name="[72]"></a>Multimedia::setOff()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, multimedia.o(.text._ZN10Multimedia6setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Multimedia::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> multimedia.o(.rodata._ZTV10Multimedia)
</UL>
<P><STRONG><a name="[177]"></a>Multimedia::Multimedia(short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, multimedia.o(.text._ZN10MultimediaC2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Multimedia::Multimedia(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1e0]"></a>Multimedia::Multimedia__sub_object(short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, multimedia.o(.text._ZN10MultimediaC2Es), UNUSED)

<P><STRONG><a name="[7b]"></a>FreshWater1::updateState()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, freshwater_1.o(.text._ZN11FreshWater111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FreshWater1::updateState() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_AD
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to FreshWater1::updateState()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freshwater_1.o(.rodata._ZTV11FreshWater1)
</UL>
<P><STRONG><a name="[7a]"></a>FreshWater1::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freshwater_1.o(.text._ZN11FreshWater113getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> freshwater_1.o(.rodata._ZTV11FreshWater1)
</UL>
<P><STRONG><a name="[79]"></a>FreshWater1::topicReceived(unsigned char*)</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, freshwater_1.o(.text._ZN11FreshWater113topicReceivedEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FreshWater1::topicReceived(unsigned char*) &rArr; Utils::ioDigitalRead(IOParameters const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalRead(IOParameters const&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freshwater_1.o(.rodata._ZTV11FreshWater1)
</UL>
<P><STRONG><a name="[77]"></a>FreshWater1::setOn()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freshwater_1.o(.text._ZN11FreshWater15setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FreshWater1::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freshwater_1.o(.rodata._ZTV11FreshWater1)
</UL>
<P><STRONG><a name="[78]"></a>FreshWater1::setOff()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freshwater_1.o(.text._ZN11FreshWater16setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FreshWater1::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freshwater_1.o(.rodata._ZTV11FreshWater1)
</UL>
<P><STRONG><a name="[16f]"></a>FreshWater1::FreshWater1(short)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, freshwater_1.o(.text._ZN11FreshWater1C2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FreshWater1::FreshWater1(short) &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1e1]"></a>FreshWater1::FreshWater1__sub_object(short)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, freshwater_1.o(.text._ZN11FreshWater1C2Es), UNUSED)

<P><STRONG><a name="[81]"></a>FloorHeating::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, floorheating.o(.text._ZN12FloorHeating11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> floorheating.o(.rodata._ZTV12FloorHeating)
</UL>
<P><STRONG><a name="[80]"></a>FloorHeating::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, floorheating.o(.text._ZN12FloorHeating13getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> floorheating.o(.rodata._ZTV12FloorHeating)
</UL>
<P><STRONG><a name="[7f]"></a>FloorHeating::topicReceived(unsigned char*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, floorheating.o(.text._ZN12FloorHeating13topicReceivedEPh))
<BR>[Address Reference Count : 1]<UL><LI> floorheating.o(.rodata._ZTV12FloorHeating)
</UL>
<P><STRONG><a name="[7d]"></a>FloorHeating::setOn()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, floorheating.o(.text._ZN12FloorHeating5setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FloorHeating::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floorheating.o(.rodata._ZTV12FloorHeating)
</UL>
<P><STRONG><a name="[7e]"></a>FloorHeating::setOff()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, floorheating.o(.text._ZN12FloorHeating6setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FloorHeating::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> floorheating.o(.rodata._ZTV12FloorHeating)
</UL>
<P><STRONG><a name="[179]"></a>FloorHeating::FloorHeating(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, floorheating.o(.text._ZN12FloorHeatingC2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FloorHeating::FloorHeating(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1e2]"></a>FloorHeating::FloorHeating__sub_object(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, floorheating.o(.text._ZN12FloorHeatingC2Es), UNUSED)

<P><STRONG><a name="[87]"></a>EmptyingValve::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emptyingvalve.o(.text._ZN13EmptyingValve11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> emptyingvalve.o(.rodata._ZTV13EmptyingValve)
</UL>
<P><STRONG><a name="[86]"></a>EmptyingValve::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, emptyingvalve.o(.text._ZN13EmptyingValve13getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> emptyingvalve.o(.rodata._ZTV13EmptyingValve)
</UL>
<P><STRONG><a name="[85]"></a>EmptyingValve::topicReceived(unsigned char*)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, emptyingvalve.o(.text._ZN13EmptyingValve13topicReceivedEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EmptyingValve::topicReceived(unsigned char*) &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emptyingvalve.o(.rodata._ZTV13EmptyingValve)
</UL>
<P><STRONG><a name="[83]"></a>EmptyingValve::setOn()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, emptyingvalve.o(.text._ZN13EmptyingValve5setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EmptyingValve::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emptyingvalve.o(.rodata._ZTV13EmptyingValve)
</UL>
<P><STRONG><a name="[84]"></a>EmptyingValve::setOff()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, emptyingvalve.o(.text._ZN13EmptyingValve6setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = EmptyingValve::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emptyingvalve.o(.rodata._ZTV13EmptyingValve)
</UL>
<P><STRONG><a name="[17b]"></a>EmptyingValve::EmptyingValve(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, emptyingvalve.o(.text._ZN13EmptyingValveC2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EmptyingValve::EmptyingValve(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1e3]"></a>EmptyingValve::EmptyingValve__sub_object(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, emptyingvalve.o(.text._ZN13EmptyingValveC2Es), UNUSED)

<P><STRONG><a name="[8e]"></a>EngineBattery1::updateState()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, enginebattery1.o(.text._ZN14EngineBattery111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EngineBattery1::updateState() &rArr; ArviGet_mV &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enginebattery1.o(.rodata._ZTV14EngineBattery1)
</UL>
<P><STRONG><a name="[8d]"></a>EngineBattery1::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, enginebattery1.o(.text._ZN14EngineBattery113getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> enginebattery1.o(.rodata._ZTV14EngineBattery1)
</UL>
<P><STRONG><a name="[8c]"></a>EngineBattery1::topicReceived(unsigned char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, enginebattery1.o(.text._ZN14EngineBattery113topicReceivedEPh))
<BR>[Address Reference Count : 1]<UL><LI> enginebattery1.o(.rodata._ZTV14EngineBattery1)
</UL>
<P><STRONG><a name="[8a]"></a>EngineBattery1::setOn()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, enginebattery1.o(.text._ZN14EngineBattery15setOnEv))
<BR>[Address Reference Count : 1]<UL><LI> enginebattery1.o(.rodata._ZTV14EngineBattery1)
</UL>
<P><STRONG><a name="[8b]"></a>EngineBattery1::setOff()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, enginebattery1.o(.text._ZN14EngineBattery16setOffEv))
<BR>[Address Reference Count : 1]<UL><LI> enginebattery1.o(.rodata._ZTV14EngineBattery1)
</UL>
<P><STRONG><a name="[16b]"></a>EngineBattery1::EngineBattery1(short)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, enginebattery1.o(.text._ZN14EngineBattery1C2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EngineBattery1::EngineBattery1(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1e4]"></a>EngineBattery1::EngineBattery1__sub_object(short)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, enginebattery1.o(.text._ZN14EngineBattery1C2Es), UNUSED)

<P><STRONG><a name="[94]"></a>ExternalLigths::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, externalligths.o(.text._ZN14ExternalLigths11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> externalligths.o(.rodata._ZTV14ExternalLigths)
</UL>
<P><STRONG><a name="[93]"></a>ExternalLigths::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, externalligths.o(.text._ZN14ExternalLigths13getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> externalligths.o(.rodata._ZTV14ExternalLigths)
</UL>
<P><STRONG><a name="[92]"></a>ExternalLigths::topicReceived(unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, externalligths.o(.text._ZN14ExternalLigths13topicReceivedEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ExternalLigths::topicReceived(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> externalligths.o(.rodata._ZTV14ExternalLigths)
</UL>
<P><STRONG><a name="[90]"></a>ExternalLigths::setOn()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, externalligths.o(.text._ZN14ExternalLigths5setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ExternalLigths::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> externalligths.o(.rodata._ZTV14ExternalLigths)
</UL>
<P><STRONG><a name="[91]"></a>ExternalLigths::setOff()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, externalligths.o(.text._ZN14ExternalLigths6setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ExternalLigths::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> externalligths.o(.rodata._ZTV14ExternalLigths)
</UL>
<P><STRONG><a name="[173]"></a>ExternalLigths::ExternalLigths(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, externalligths.o(.text._ZN14ExternalLigthsC2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExternalLigths::ExternalLigths(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1e5]"></a>ExternalLigths::ExternalLigths__sub_object(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, externalligths.o(.text._ZN14ExternalLigthsC2Es), UNUSED)

<P><STRONG><a name="[9a]"></a>InternalLigths::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, internalligths.o(.text._ZN14InternalLigths11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> internalligths.o(.rodata._ZTV14InternalLigths)
</UL>
<P><STRONG><a name="[99]"></a>InternalLigths::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, internalligths.o(.text._ZN14InternalLigths13getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> internalligths.o(.rodata._ZTV14InternalLigths)
</UL>
<P><STRONG><a name="[98]"></a>InternalLigths::topicReceived(unsigned char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, internalligths.o(.text._ZN14InternalLigths13topicReceivedEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InternalLigths::topicReceived(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalligths.o(.rodata._ZTV14InternalLigths)
</UL>
<P><STRONG><a name="[96]"></a>InternalLigths::setOn()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, internalligths.o(.text._ZN14InternalLigths5setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InternalLigths::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalligths.o(.rodata._ZTV14InternalLigths)
</UL>
<P><STRONG><a name="[97]"></a>InternalLigths::setOff()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, internalligths.o(.text._ZN14InternalLigths6setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InternalLigths::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalligths.o(.rodata._ZTV14InternalLigths)
</UL>
<P><STRONG><a name="[172]"></a>InternalLigths::InternalLigths(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, internalligths.o(.text._ZN14InternalLigthsC2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InternalLigths::InternalLigths(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1e6]"></a>InternalLigths::InternalLigths__sub_object(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, internalligths.o(.text._ZN14InternalLigthsC2Es), UNUSED)

<P><STRONG><a name="[a0]"></a>LeisureBattery1::updateState()</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, leisurebattery1.o(.text._ZN15LeisureBattery111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = LeisureBattery1::updateState() &rArr; Errors::addError(short, short) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mA
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mV
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::sendInfoFrame(unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::idCalc(unsigned char)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::cleanError(short, short)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::errorExists(short, short)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::addError(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to LeisureBattery1::updateState()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
</UL>
<P><STRONG><a name="[9f]"></a>LeisureBattery1::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, leisurebattery1.o(.text._ZN15LeisureBattery113getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
</UL>
<P><STRONG><a name="[9e]"></a>LeisureBattery1::topicReceived(unsigned char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, leisurebattery1.o(.text._ZN15LeisureBattery113topicReceivedEPh))
<BR>[Address Reference Count : 1]<UL><LI> leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
</UL>
<P><STRONG><a name="[a1]"></a>LeisureBattery1::processInfoFrame(unsigned char*)</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, leisurebattery1.o(.text._ZN15LeisureBattery116processInfoFrameEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = LeisureBattery1::processInfoFrame(unsigned char*) &rArr; Errors::addError(short, short) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mV
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::cleanError(short, short)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::errorExists(short, short)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::addError(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to LeisureBattery1::processInfoFrame(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
</UL>
<P><STRONG><a name="[9c]"></a>LeisureBattery1::setOn()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, leisurebattery1.o(.text._ZN15LeisureBattery15setOnEv))
<BR>[Address Reference Count : 1]<UL><LI> leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
</UL>
<P><STRONG><a name="[9d]"></a>LeisureBattery1::setOff()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, leisurebattery1.o(.text._ZN15LeisureBattery16setOffEv))
<BR>[Address Reference Count : 1]<UL><LI> leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
</UL>
<P><STRONG><a name="[178]"></a>LeisureBattery1::LeisureBattery1(short)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, leisurebattery1.o(.text._ZN15LeisureBattery1C2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = LeisureBattery1::LeisureBattery1(short) &rArr; LinClients::setIdInfo(unsigned char) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVariant
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::setSizeInfoFrame(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::setIdInfo(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::LinClients__sub_object()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::idCalc(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1e7]"></a>LeisureBattery1::LeisureBattery1__sub_object(short)</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, leisurebattery1.o(.text._ZN15LeisureBattery1C2Es), UNUSED)

<P><STRONG><a name="[a8]"></a>SolarRegulator1::updateState()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, solarregulator1.o(.text._ZN15SolarRegulator111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SolarRegulator1::updateState() &rArr; LinMaster::sendInfoFrame(unsigned char) &rArr; Tx_UART3 &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mA
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::sendInfoFrame(unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::idCalc(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> solarregulator1.o(.rodata._ZTV15SolarRegulator1)
</UL>
<P><STRONG><a name="[a7]"></a>SolarRegulator1::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, solarregulator1.o(.text._ZN15SolarRegulator113getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> solarregulator1.o(.rodata._ZTV15SolarRegulator1)
</UL>
<P><STRONG><a name="[a6]"></a>SolarRegulator1::topicReceived(unsigned char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, solarregulator1.o(.text._ZN15SolarRegulator113topicReceivedEPh))
<BR>[Address Reference Count : 1]<UL><LI> solarregulator1.o(.rodata._ZTV15SolarRegulator1)
</UL>
<P><STRONG><a name="[a9]"></a>SolarRegulator1::processInfoFrame(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, solarregulator1.o(.text._ZN15SolarRegulator116processInfoFrameEPh))
<BR>[Address Reference Count : 1]<UL><LI> solarregulator1.o(.rodata._ZTV15SolarRegulator1)
</UL>
<P><STRONG><a name="[a4]"></a>SolarRegulator1::setOn()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, solarregulator1.o(.text._ZN15SolarRegulator15setOnEv))
<BR>[Address Reference Count : 1]<UL><LI> solarregulator1.o(.rodata._ZTV15SolarRegulator1)
</UL>
<P><STRONG><a name="[a5]"></a>SolarRegulator1::setOff()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, solarregulator1.o(.text._ZN15SolarRegulator16setOffEv))
<BR>[Address Reference Count : 1]<UL><LI> solarregulator1.o(.rodata._ZTV15SolarRegulator1)
</UL>
<P><STRONG><a name="[17c]"></a>SolarRegulator1::SolarRegulator1(short)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, solarregulator1.o(.text._ZN15SolarRegulator1C2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SolarRegulator1::SolarRegulator1(short) &rArr; LinClients::setIdInfo(unsigned char) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::setSizeInfoFrame(short)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::setIdInfo(unsigned char)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::LinClients__sub_object()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::idCalc(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1e8]"></a>SolarRegulator1::SolarRegulator1__sub_object(short)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, solarregulator1.o(.text._ZN15SolarRegulator1C2Es), UNUSED)

<P><STRONG><a name="[16e]"></a>CommunicationManager::addClients(Devices*)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, comunicationmanager.o(.text._ZN20CommunicationManager10addClientsEP7Devices))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = CommunicationManager::addClients(Devices*) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[18d]"></a>CommunicationManager::processTopic(unsigned char*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, comunicationmanager.o(.text._ZN20CommunicationManager12processTopicEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CommunicationManager::processTopic(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::getIdTopic()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::traslate2Topic(unsigned char*)
</UL>

<P><STRONG><a name="[18f]"></a>CommunicationManager::getTopicState(unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, comunicationmanager.o(.text._ZN20CommunicationManager13getTopicStateEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommunicationManager::getTopicState(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::getIdTopic()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::updateInfoFrames()
</UL>

<P><STRONG><a name="[1e9]"></a>CommunicationManager::CommunicationManager()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comunicationmanager.o(.text._ZN20CommunicationManagerC2Ev), UNUSED)

<P><STRONG><a name="[195]"></a>CommunicationManager::CommunicationManager__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, comunicationmanager.o(.text._ZN20CommunicationManagerC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::Lin()
</UL>

<P><STRONG><a name="[15a]"></a>Lin::composeMsgLin(unsigned char)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, lin.o(.text._ZN3Lin13composeMsgLinEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Lin::composeMsgLin(unsigned char) &rArr; Lin::verifyInfoFrame(unsigned char) &rArr; Errors::getError() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::traslate2Topic(unsigned char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::verifyInfoFrame(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[191]"></a>Lin::traslate2Topic(unsigned char*)</STRONG> (Thumb, 438 bytes, Stack size 48 bytes, lin.o(.text._ZN3Lin14traslate2TopicEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Lin::traslate2Topic(unsigned char*) &rArr; CommunicationManager::processTopic(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::getNumErrors()
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::processTopic(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::composeMsgLin(unsigned char)
</UL>

<P><STRONG><a name="[190]"></a>Lin::verifyInfoFrame(unsigned char)</STRONG> (Thumb, 390 bytes, Stack size 32 bytes, lin.o(.text._ZN3Lin15verifyInfoFrameEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = Lin::verifyInfoFrame(unsigned char) &rArr; Errors::getError() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UART1
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::getError()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::getNumErrors()
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::composeMsgLin(unsigned char)
</UL>

<P><STRONG><a name="[111]"></a>Lin::updateInfoFrames()</STRONG> (Thumb, 1004 bytes, Stack size 24 bytes, lin.o(.text._ZN3Lin16updateInfoFramesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lin::updateInfoFrames() &rArr; CommunicationManager::getTopicState(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::setBits(unsigned short, unsigned short, short)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::getTopicState(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Main
</UL>

<P><STRONG><a name="[116]"></a>Lin::Lin()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lin.o(.text._ZN3LinC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Lin::Lin() &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviSet
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::CommunicationManager__sub_object()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Setup
</UL>

<P><STRONG><a name="[1ea]"></a>Lin::Lin__sub_object()</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lin.o(.text._ZN3LinC2Ev), UNUSED)

<P><STRONG><a name="[b0]"></a>Fuses::updateState()</STRONG> (Thumb, 578 bytes, Stack size 16 bytes, fuses.o(.text._ZN5Fuses11updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Fuses::updateState() &rArr; ArviGet &rArr; Read_IO_Expander &rArr; HAL_I2C_Mem_Read &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::cleanError(short, short)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::errorExists(short, short)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::addError(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to Fuses::updateState()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fuses.o(.rodata._ZTV5Fuses)
</UL>
<P><STRONG><a name="[af]"></a>Fuses::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fuses.o(.text._ZN5Fuses13getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> fuses.o(.rodata._ZTV5Fuses)
</UL>
<P><STRONG><a name="[ae]"></a>Fuses::topicReceived(unsigned char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fuses.o(.text._ZN5Fuses13topicReceivedEPh))
<BR>[Address Reference Count : 1]<UL><LI> fuses.o(.rodata._ZTV5Fuses)
</UL>
<P><STRONG><a name="[ac]"></a>Fuses::setOn()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fuses.o(.text._ZN5Fuses5setOnEv))
<BR>[Address Reference Count : 1]<UL><LI> fuses.o(.rodata._ZTV5Fuses)
</UL>
<P><STRONG><a name="[ad]"></a>Fuses::setOff()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fuses.o(.text._ZN5Fuses6setOffEv))
<BR>[Address Reference Count : 1]<UL><LI> fuses.o(.rodata._ZTV5Fuses)
</UL>
<P><STRONG><a name="[170]"></a>Fuses::Fuses(short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fuses.o(.text._ZN5FusesC2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fuses::Fuses(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1eb]"></a>Fuses::Fuses__sub_object(short)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fuses.o(.text._ZN5FusesC2Es), UNUSED)

<P><STRONG><a name="[17f]"></a>Utils::ioDigitalRead(IOParameters const&)</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, utils.o(.text._ZN5Utils13ioDigitalReadERK12IOParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Utils::ioDigitalRead(IOParameters const&)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::topicReceived(unsigned char*)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::topicReceived(unsigned char*)
</UL>

<P><STRONG><a name="[180]"></a>Utils::ioDigitalWrite(IOParameters const&, short)</STRONG> (Thumb, 292 bytes, Stack size 8 bytes, utils.o(.text._ZN5Utils14ioDigitalWriteERK12IOParameterss))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviSet
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::GrayWater1(short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::FreshWater1(short)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalLigths::setOff()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalLigths::setOn()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyingValve::topicReceived(unsigned char*)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyingValve::setOff()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyingValve::setOn()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterPump::setOff()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterPump::setOn()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multimedia::setOff()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multimedia::setOn()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ligths1::setOff()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ligths1::setOn()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverter::setOff()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverter::setOn()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalLigths::setOff()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalLigths::setOn()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::setOff()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::setOn()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fridge::setOff()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fridge::setOn()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::setOff()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::setOn()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorHeating::setOff()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorHeating::setOn()
</UL>

<P><STRONG><a name="[194]"></a>Utils::setBits(unsigned short, unsigned short, short)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, utils.o(.text._ZN5Utils7setBitsEtts))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::updateInfoFrames()
</UL>

<P><STRONG><a name="[186]"></a>Errors::cleanError(short, short)</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, errormanager.o(.text._ZN6Errors10cleanErrorEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Errors::cleanError(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::processInfoFrame(unsigned char*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::updateState()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuses::updateState()
</UL>

<P><STRONG><a name="[185]"></a>Errors::errorExists(short, short)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, errormanager.o(.text._ZN6Errors11errorExistsEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Errors::errorExists(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::processInfoFrame(unsigned char*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::updateState()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuses::updateState()
</UL>

<P><STRONG><a name="[192]"></a>Errors::getNumErrors()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, errormanager.o(.text._ZN6Errors12getNumErrorsEv))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::traslate2Topic(unsigned char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::verifyInfoFrame(unsigned char)
</UL>

<P><STRONG><a name="[189]"></a>Errors::addError(short, short)</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, errormanager.o(.text._ZN6Errors8addErrorEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Errors::addError(short, short) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::processInfoFrame(unsigned char*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::updateState()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuses::updateState()
</UL>

<P><STRONG><a name="[193]"></a>Errors::getError()</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, errormanager.o(.text._ZN6Errors8getErrorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Errors::getError() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lin::verifyInfoFrame(unsigned char)
</UL>

<P><STRONG><a name="[b6]"></a>Fridge::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fridge.o(.text._ZN6Fridge11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> fridge.o(.rodata._ZTV6Fridge)
</UL>
<P><STRONG><a name="[b5]"></a>Fridge::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fridge.o(.text._ZN6Fridge13getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> fridge.o(.rodata._ZTV6Fridge)
</UL>
<P><STRONG><a name="[b4]"></a>Fridge::topicReceived(unsigned char*)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fridge.o(.text._ZN6Fridge13topicReceivedEPh))
<BR>[Address Reference Count : 1]<UL><LI> fridge.o(.rodata._ZTV6Fridge)
</UL>
<P><STRONG><a name="[b2]"></a>Fridge::setOn()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fridge.o(.text._ZN6Fridge5setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Fridge::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fridge.o(.rodata._ZTV6Fridge)
</UL>
<P><STRONG><a name="[b3]"></a>Fridge::setOff()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fridge.o(.text._ZN6Fridge6setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Fridge::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fridge.o(.rodata._ZTV6Fridge)
</UL>
<P><STRONG><a name="[17a]"></a>Fridge::Fridge(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fridge.o(.text._ZN6FridgeC2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fridge::Fridge(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1ec]"></a>Fridge::Fridge__sub_object(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fridge.o(.text._ZN6FridgeC2Es), UNUSED)

<P><STRONG><a name="[18e]"></a>Devices::getIdTopic()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, devices.o(.text._ZN7Devices10getIdTopicEv))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::getTopicState(unsigned char)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::processTopic(unsigned char*)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterPump::topicReceived(unsigned char*)
</UL>

<P><STRONG><a name="[181]"></a>Devices::Devices__sub_object(short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, devices.o(.text._ZN7DevicesC2Es))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaterPump::WaterPump(short)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::SolarRegulator1(short)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EmptyingValve::EmptyingValve(short)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fridge::Fridge(short)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FloorHeating::FloorHeating(short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::LeisureBattery1(short)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Multimedia::Multimedia(short)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverter::Inverter(short)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ligths1::Ligths1(short)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExternalLigths::ExternalLigths(short)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalLigths::InternalLigths(short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::GrayWater1(short)
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuses::Fuses(short)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::FreshWater1(short)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineBattery1::EngineBattery1(short)
</UL>

<P><STRONG><a name="[bc]"></a>Ligths1::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ligths_1.o(.text._ZN7Ligths111updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> ligths_1.o(.rodata._ZTV7Ligths1)
</UL>
<P><STRONG><a name="[bb]"></a>Ligths1::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ligths_1.o(.text._ZN7Ligths113getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> ligths_1.o(.rodata._ZTV7Ligths1)
</UL>
<P><STRONG><a name="[ba]"></a>Ligths1::topicReceived(unsigned char*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ligths_1.o(.text._ZN7Ligths113topicReceivedEPh))
<BR>[Address Reference Count : 1]<UL><LI> ligths_1.o(.rodata._ZTV7Ligths1)
</UL>
<P><STRONG><a name="[b8]"></a>Ligths1::setOn()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ligths_1.o(.text._ZN7Ligths15setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Ligths1::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ligths_1.o(.rodata._ZTV7Ligths1)
</UL>
<P><STRONG><a name="[b9]"></a>Ligths1::setOff()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ligths_1.o(.text._ZN7Ligths16setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Ligths1::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ligths_1.o(.rodata._ZTV7Ligths1)
</UL>
<P><STRONG><a name="[174]"></a>Ligths1::Ligths1(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ligths_1.o(.text._ZN7Ligths1C2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ligths1::Ligths1(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1ed]"></a>Ligths1::Ligths1__sub_object(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ligths_1.o(.text._ZN7Ligths1C2Es), UNUSED)

<P><STRONG><a name="[c2]"></a>Inverter::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inverter.o(.text._ZN8Inverter11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.rodata._ZTV8Inverter)
</UL>
<P><STRONG><a name="[c1]"></a>Inverter::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, inverter.o(.text._ZN8Inverter13getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.rodata._ZTV8Inverter)
</UL>
<P><STRONG><a name="[c0]"></a>Inverter::topicReceived(unsigned char*)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, inverter.o(.text._ZN8Inverter13topicReceivedEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = Inverter::topicReceived(unsigned char*) &rArr; LinMaster::sendControlFrame(unsigned char*, unsigned char) &rArr; MX_USART3_UART_Init &rArr; HAL_LIN_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::sendControlFrame(unsigned char*, unsigned char)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::calculateCheckSum(unsigned char*, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.rodata._ZTV8Inverter)
</UL>
<P><STRONG><a name="[be]"></a>Inverter::setOn()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inverter.o(.text._ZN8Inverter5setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Inverter::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.rodata._ZTV8Inverter)
</UL>
<P><STRONG><a name="[bf]"></a>Inverter::setOff()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, inverter.o(.text._ZN8Inverter6setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Inverter::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.rodata._ZTV8Inverter)
</UL>
<P><STRONG><a name="[175]"></a>Inverter::Inverter(short)</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, inverter.o(.text._ZN8InverterC2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Inverter::Inverter(short) &rArr; LinClients::LinClients__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::LinClients__sub_object()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::idCalc(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1ee]"></a>Inverter::Inverter__sub_object(short)</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, inverter.o(.text._ZN8InverterC2Es), UNUSED)

<P><STRONG><a name="[159]"></a>LinMaster::composeMsgLin(unsigned char)</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, linmaster.o(.text._ZN9LinMaster13composeMsgLinEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LinMaster::composeMsgLin(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::getSizeInfoFrame()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::verifyIdInfo(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[188]"></a>LinMaster::sendInfoFrame(unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, linmaster.o(.text._ZN9LinMaster13sendInfoFrameEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LinMaster::sendInfoFrame(unsigned char) &rArr; Tx_UART3 &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UART3
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_SendBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to SolarRegulator1::updateState()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::updateState()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::updateState()
</UL>

<P><STRONG><a name="[196]"></a>LinMaster::sendControlFrame(unsigned char*, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, linmaster.o(.text._ZN9LinMaster16sendControlFrameEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = LinMaster::sendControlFrame(unsigned char*, unsigned char) &rArr; MX_USART3_UART_Init &rArr; HAL_LIN_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_UART3
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LIN_SendBreak
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverter::topicReceived(unsigned char*)
</UL>

<P><STRONG><a name="[197]"></a>LinMaster::calculateCheckSum(unsigned char*, short)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, linmaster.o(.text._ZN9LinMaster17calculateCheckSumEPhs))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverter::topicReceived(unsigned char*)
</UL>

<P><STRONG><a name="[187]"></a>LinMaster::idCalc(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, linmaster.o(.text._ZN9LinMaster6idCalcEh))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::SolarRegulator1(short)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::LeisureBattery1(short)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inverter::Inverter(short)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;non-virtual thunk to SolarRegulator1::updateState()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarRegulator1::updateState()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::updateState()
</UL>

<P><STRONG><a name="[176]"></a>LinMaster::addClient(LinClients*)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, linmaster.o(.text._ZN9LinMaster9addClientEP10LinClients))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = LinMaster::addClient(LinClients*) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__throw_bad_array_new_length[abi:v16000]()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[117]"></a>LinMaster::LinMaster()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, linmaster.o(.text._ZN9LinMasterC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LinMaster::LinMaster() &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviSet
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Setup
</UL>

<P><STRONG><a name="[1ef]"></a>LinMaster::LinMaster__sub_object()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, linmaster.o(.text._ZN9LinMasterC2Ev), UNUSED)

<P><STRONG><a name="[c8]"></a>WaterPump::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waterpump.o(.text._ZN9WaterPump11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> waterpump.o(.rodata._ZTV9WaterPump)
</UL>
<P><STRONG><a name="[c7]"></a>WaterPump::getTopicState()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, waterpump.o(.text._ZN9WaterPump13getTopicStateEv))
<BR>[Address Reference Count : 1]<UL><LI> waterpump.o(.rodata._ZTV9WaterPump)
</UL>
<P><STRONG><a name="[c6]"></a>WaterPump::topicReceived(unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, waterpump.o(.text._ZN9WaterPump13topicReceivedEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaterPump::topicReceived(unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::getIdTopic()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> waterpump.o(.rodata._ZTV9WaterPump)
</UL>
<P><STRONG><a name="[c4]"></a>WaterPump::setOn()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, waterpump.o(.text._ZN9WaterPump5setOnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WaterPump::setOn() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> waterpump.o(.rodata._ZTV9WaterPump)
</UL>
<P><STRONG><a name="[c5]"></a>WaterPump::setOff()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, waterpump.o(.text._ZN9WaterPump6setOffEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = WaterPump::setOff() &rArr; Utils::ioDigitalWrite(IOParameters const&, short) &rArr; ArviSet &rArr; Write_IO_Expander &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utils::ioDigitalWrite(IOParameters const&, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> waterpump.o(.rodata._ZTV9WaterPump)
</UL>
<P><STRONG><a name="[17d]"></a>WaterPump::WaterPump(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, waterpump.o(.text._ZN9WaterPumpC2Es))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WaterPump::WaterPump(short)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Devices::Devices__sub_object(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
</UL>

<P><STRONG><a name="[1f0]"></a>WaterPump::WaterPump__sub_object(short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, waterpump.o(.text._ZN9WaterPumpC2Es), UNUSED)

<P><STRONG><a name="[69]"></a>std::__2::vector&lang;errors, std::__2::allocator&lang;errors&rang;&rang;::~vector__sub_object[abi:v16000]()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, errormanager.o(.text._ZNSt3__26vectorI6errorsNS_9allocatorIS1_EEED2B6v16000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::vector&lang;errors, std::__2::allocator&lang;errors&rang;&rang;::~vector__sub_object[abi:v16000]() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> errormanager.o(.text._GLOBAL__sub_I_ErrorManager.cpp)
</UL>
<P><STRONG><a name="[67]"></a>std::__2::vector&lang;SystemDevices*, std::__2::allocator&lang;SystemDevices*&rang;&rang;::~vector__sub_object[abi:v16000]()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, arvi-main.o(.text._ZNSt3__26vectorIP13SystemDevicesNS_9allocatorIS2_EEED2B6v16000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::vector&lang;SystemDevices*, std::__2::allocator&lang;SystemDevices*&rang;&rang;::~vector__sub_object[abi:v16000]() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arvi-main.o(.text._GLOBAL__sub_I_Arvi_Main.cpp)
</UL>
<P><STRONG><a name="[68]"></a>std::__2::vector&lang;unsigned char*, std::__2::allocator&lang;unsigned char*&rang;&rang;::~vector__sub_object[abi:v16000]()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, canattender.o(.text._ZNSt3__26vectorIPhNS_9allocatorIS1_EEED2B6v16000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__2::vector&lang;unsigned char*, std::__2::allocator&lang;unsigned char*&rang;&rang;::~vector__sub_object[abi:v16000]() &rArr; operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canattender.o(.text._GLOBAL__sub_I_CanAttender.cpp)
</UL>
<P><STRONG><a name="[19c]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[17e]"></a>std::__throw_bad_array_new_length[abi:v16000]()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arvi-main.o(.text._ZSt28__throw_bad_array_new_lengthB6v16000v))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = std::__throw_bad_array_new_length[abi:v16000]() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::addClient(LinClients*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::addClients(Devices*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::getError()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::addError(short, short)
</UL>

<P><STRONG><a name="[a3]"></a>non-virtual thunk to LeisureBattery1::processInfoFrame(unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, leisurebattery1.o(.text._ZThn12_N15LeisureBattery116processInfoFrameEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to LeisureBattery1::processInfoFrame(unsigned char*) &rArr; LeisureBattery1::processInfoFrame(unsigned char*) &rArr; Errors::addError(short, short) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::processInfoFrame(unsigned char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
</UL>
<P><STRONG><a name="[ab]"></a>non-virtual thunk to SolarRegulator1::processInfoFrame(unsigned char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, solarregulator1.o(.text._ZThn12_N15SolarRegulator116processInfoFrameEPh))
<BR>[Address Reference Count : 1]<UL><LI> solarregulator1.o(.rodata._ZTV15SolarRegulator1)
</UL>
<P><STRONG><a name="[6f]"></a>non-virtual thunk to GrayWater1::updateState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, graywater_1.o(.text._ZThn8_N10GrayWater111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = non-virtual thunk to GrayWater1::updateState() &rArr; GrayWater1::updateState() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::updateState()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> graywater_1.o(.rodata._ZTV10GrayWater1)
</UL>
<P><STRONG><a name="[76]"></a>non-virtual thunk to Multimedia::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, multimedia.o(.text._ZThn8_N10Multimedia11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> multimedia.o(.rodata._ZTV10Multimedia)
</UL>
<P><STRONG><a name="[7c]"></a>non-virtual thunk to FreshWater1::updateState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, freshwater_1.o(.text._ZThn8_N11FreshWater111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = non-virtual thunk to FreshWater1::updateState() &rArr; FreshWater1::updateState() &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::updateState()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freshwater_1.o(.rodata._ZTV11FreshWater1)
</UL>
<P><STRONG><a name="[82]"></a>non-virtual thunk to FloorHeating::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, floorheating.o(.text._ZThn8_N12FloorHeating11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> floorheating.o(.rodata._ZTV12FloorHeating)
</UL>
<P><STRONG><a name="[88]"></a>non-virtual thunk to EmptyingValve::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emptyingvalve.o(.text._ZThn8_N13EmptyingValve11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> emptyingvalve.o(.rodata._ZTV13EmptyingValve)
</UL>
<P><STRONG><a name="[8f]"></a>non-virtual thunk to EngineBattery1::updateState()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, enginebattery1.o(.text._ZThn8_N14EngineBattery111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = non-virtual thunk to EngineBattery1::updateState() &rArr; ArviGet_mV &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> enginebattery1.o(.rodata._ZTV14EngineBattery1)
</UL>
<P><STRONG><a name="[95]"></a>non-virtual thunk to ExternalLigths::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, externalligths.o(.text._ZThn8_N14ExternalLigths11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> externalligths.o(.rodata._ZTV14ExternalLigths)
</UL>
<P><STRONG><a name="[9b]"></a>non-virtual thunk to InternalLigths::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, internalligths.o(.text._ZThn8_N14InternalLigths11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> internalligths.o(.rodata._ZTV14InternalLigths)
</UL>
<P><STRONG><a name="[a2]"></a>non-virtual thunk to LeisureBattery1::updateState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, leisurebattery1.o(.text._ZThn8_N15LeisureBattery111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to LeisureBattery1::updateState() &rArr; LeisureBattery1::updateState() &rArr; Errors::addError(short, short) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::updateState()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> leisurebattery1.o(.rodata._ZTV15LeisureBattery1)
</UL>
<P><STRONG><a name="[aa]"></a>non-virtual thunk to SolarRegulator1::updateState()</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, solarregulator1.o(.text._ZThn8_N15SolarRegulator111updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = non-virtual thunk to SolarRegulator1::updateState() &rArr; LinMaster::sendInfoFrame(unsigned char) &rArr; Tx_UART3 &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMilliSec
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mA
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::sendInfoFrame(unsigned char)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::idCalc(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> solarregulator1.o(.rodata._ZTV15SolarRegulator1)
</UL>
<P><STRONG><a name="[b1]"></a>non-virtual thunk to Fuses::updateState()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fuses.o(.text._ZThn8_N5Fuses11updateStateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = non-virtual thunk to Fuses::updateState() &rArr; Fuses::updateState() &rArr; ArviGet &rArr; Read_IO_Expander &rArr; HAL_I2C_Mem_Read &rArr; I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuses::updateState()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fuses.o(.rodata._ZTV5Fuses)
</UL>
<P><STRONG><a name="[b7]"></a>non-virtual thunk to Fridge::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fridge.o(.text._ZThn8_N6Fridge11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> fridge.o(.rodata._ZTV6Fridge)
</UL>
<P><STRONG><a name="[bd]"></a>non-virtual thunk to Ligths1::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ligths_1.o(.text._ZThn8_N7Ligths111updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> ligths_1.o(.rodata._ZTV7Ligths1)
</UL>
<P><STRONG><a name="[c3]"></a>non-virtual thunk to Inverter::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inverter.o(.text._ZThn8_N8Inverter11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> inverter.o(.rodata._ZTV8Inverter)
</UL>
<P><STRONG><a name="[c9]"></a>non-virtual thunk to WaterPump::updateState()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, waterpump.o(.text._ZThn8_N9WaterPump11updateStateEv))
<BR>[Address Reference Count : 1]<UL><LI> waterpump.o(.rodata._ZTV9WaterPump)
</UL>
<P><STRONG><a name="[19b]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*, unsigned int)
</UL>

<P><STRONG><a name="[16d]"></a>operator delete(void*, unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*, unsigned int) &rArr; operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::addClient(LinClients*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::addClients(Devices*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;SystemDevices*, std::__2::allocator&lang;SystemDevices*&rang;&rang;::~vector__sub_object[abi:v16000]()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::setIdInfo(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::getError()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;unsigned char*, std::__2::allocator&lang;unsigned char*&rang;&rang;::~vector__sub_object[abi:v16000]()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::vector&lang;errors, std::__2::allocator&lang;errors&rang;&rang;::~vector__sub_object[abi:v16000]()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::addError(short, short)
</UL>

<P><STRONG><a name="[115]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinMaster::addClient(LinClients*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommunicationManager::addClients(Devices*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTopics()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Setup
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::LinClients()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinClients::setIdInfo(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::getError()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Errors::addError(short, short)
</UL>

<P><STRONG><a name="[89]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 2]<UL><LI> devices.o(.rodata._ZTV7Devices)
<LI> airconditioner1.o(.rodata._ZTV13SystemDevices)
</UL>
<P><STRONG><a name="[19d]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[18b]"></a>checkVariant</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, arvi-main.o(.text.checkVariant))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = checkVariant &rArr; ScanMultiplexores
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_AD
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMultiplexores
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LeisureBattery1::LeisureBattery1(short)
</UL>

<P><STRONG><a name="[de]"></a>main</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = main &rArr; Bios_Init &rArr; MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Main
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arvi_Setup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bios_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanMultiplexores
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mA
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mV
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::updateState()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::updateState()
</UL>

<P><STRONG><a name="[19e]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mA
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mV
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::updateState()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::updateState()
</UL>

<P><STRONG><a name="[1f1]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mA
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArviGet_mV
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GrayWater1::updateState()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreshWater1::updateState()
</UL>

<P><STRONG><a name="[1a1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a0]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1a2]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[d3]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1f2]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1f3]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[19f]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ca]"></a>_GLOBAL__sub_I_Arvi_Main.cpp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, arvi-main.o(.text._GLOBAL__sub_I_Arvi_Main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_Arvi_Main.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arvi-main.o(.init_array)
</UL>
<P><STRONG><a name="[13b]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, stm32g4xx_hal_i2c.o(.text.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
</UL>

<P><STRONG><a name="[13c]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32g4xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[64]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; Lin::composeMsgLin(unsigned char) &rArr; Lin::verifyInfoFrame(unsigned char) &rArr; Errors::getError() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32g4xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
</UL>
<P><STRONG><a name="[65]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, stm32g4xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; Lin::composeMsgLin(unsigned char) &rArr; Lin::verifyInfoFrame(unsigned char) &rArr; Errors::getError() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[63]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; Lin::composeMsgLin(unsigned char) &rArr; Lin::verifyInfoFrame(unsigned char) &rArr; Errors::getError() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32g4xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32g4xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[66]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, stm32g4xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; Lin::composeMsgLin(unsigned char) &rArr; Lin::verifyInfoFrame(unsigned char) &rArr; Errors::getError() &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[62]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32g4xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32g4xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[cb]"></a>_GLOBAL__sub_I_CanAttender.cpp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, canattender.o(.text._GLOBAL__sub_I_CanAttender.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_CanAttender.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canattender.o(.init_array)
</UL>
<P><STRONG><a name="[cc]"></a>_GLOBAL__sub_I_ErrorManager.cpp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, errormanager.o(.text._GLOBAL__sub_I_ErrorManager.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_ErrorManager.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> errormanager.o(.init_array)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
